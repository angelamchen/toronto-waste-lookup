{"version":3,"sources":["logo.svg","SearchResult.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SearchResult","_this$props","this","props","searchResult","toggleFavourite","react_default","a","createElement","className","map","result","index","key","concat","IsFavourite","onClick","title","ReactHtmlParser","body","Component","Search","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","searchKey","target","value","handleSubmit","submitForm","preventDefault","state","initialState","onSubmit","type","name","onChange","App","twlData","lookupResult","favourites","findIndex","item","filter","search","toLowerCase","indexOf","_this2","fetch","then","dataResult","json","src_Search","src_SearchResult","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb8d2a3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\r\n\r\nclass SearchResult extends Component{\r\n    render() {\r\n        const  { searchResult, toggleFavourite } = this.props;\r\n        return (\r\n            <div className=\"pt-4\">\r\n                { searchResult.map( (result,index) => <div key={index} className=\"row\" >\r\n                <div className=\"col-xs-6\"><span className={`glyphicon glyphicon-star ${result.IsFavourite? \"text-success\":\"text-secondary\" }`} \r\n                                                onClick={()=>toggleFavourite(result.title)}>\r\n                                        </span> {result.title}</div>\r\n                <div className=\"col-xs-6\">{ReactHtmlParser(ReactHtmlParser(result.body))}</div></div>) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResult;","import React, { Component } from 'react';\r\n\r\nclass Search extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /* initialize this.initialState into an object */\r\n        this.initialState = {\r\n            searchKey: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    /* event function: event are human interactions e.g. click... */\r\n    handleChange = event => {\r\n        this.setState({ searchKey: event.target.value }); //everytime state changes, it re renders. allows letters to send\r\n        \r\n        // When the search input field is cleared, the list of results should also be cleared function\r\n        if (event.target.value === \"\") {\r\n            this.props.handleSubmit({ searchKey: \"\" }); // often tested in JS. why ===? t\r\n        }\r\n    }\r\n    /* handleSubmitForm -> better naming convention. q: why (event) */\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n    }\r\n\r\n    /* no =, rather () meaning it is a method, not a property */\r\n    render() {\r\n        const { searchKey } = this.state; /* object */\r\n\r\n        return (\r\n            <div className=\"pt-4\">\r\n                <form onSubmit={this.submitForm}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"input-group input-group-lg\">\r\n                                <input type=\"text\" name=\"searchKey\" className=\"form-control\" value={searchKey}\r\n                                    onChange={this.handleChange} />\r\n                                <button type=\"button\" className=\"btn btn-success\">\r\n                                    <span className=\"glyphicon glyphicon-search\" onClick={this.submitForm}></span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchResult from './SearchResult';\nimport Search from './Search';\n\nclass App extends Component {\n  twlData = {};\n  state = {\n    lookupResult: [],\n    favourites: []\n  };\n\n  // api call to take data from toronto waste lookup\n  componentDidMount() {\n    const url = \"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\";\n\n    fetch(url)\n      .then(dataResult => dataResult.json())\n      .then(dataResult => {\n        this.twlData = dataResult;\n      });\n  }\n\n  // function to toggle favourite section\n  toggleFavourite = title => {\n    let index = this.twlData.findIndex((item) => {\n      return item.title === title;\n    });\n    if (this.twlData[index].IsFavourite) {\n      this.twlData[index].IsFavourite = false;\n    }\n    else {\n      this.twlData[index].IsFavourite = true;\n    }\n    let result = this.twlData.filter((item) => { return item.IsFavourite; });\n    this.setState({favourites: result});\n\n  };\n\n  // function for when user searches something\n  handleSubmit = search => {\n    let result = [];\n    if (search.searchKey !== \"\") {\n      result = this.twlData.filter((item) => {\n        return item.title.toLowerCase().indexOf(search.searchKey.toLowerCase()) !== -1;\n      });\n    }\n    this.setState({ lookupResult: result });\n  }\n\n  render() {\n    const { lookupResult } = this.state;\n    const { favourites } = this.state;\n    return (\n      <div className=\"app\">\n      \n        {/* App header */}\n        <div className=\"App-header\">\n          Toronto Waste Lookup\n        </div>\n\n        <div className=\"container\">\n\n          {/* search bar component */}\n          <Search handleSubmit={this.handleSubmit} />\n\n          {/* list items component */}\n          <SearchResult\n            searchResult={lookupResult}\n            toggleFavourite={this.toggleFavourite}\n          />\n\n          {/* favourites component */}\n          <div className={`${favourites.length > 0 ? \"visible\" : \"invisible\"}`} ><h3 className=\"text-success\">Favourites</h3></div>\n      \n          <SearchResult\n            searchResult={favourites}\n            toggleFavourite={this.toggleFavourite}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}